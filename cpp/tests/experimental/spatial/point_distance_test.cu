/*
 * Copyright (c) 2022, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <cuspatial/error.hpp>
#include <cuspatial/experimental/point_distance.cuh>
#include <cuspatial/experimental/type_utils.hpp>
#include <cuspatial/utility/vec_2d.hpp>

#include <rmm/device_uvector.hpp>
#include <rmm/device_vector.hpp>

#include <thrust/generate.h>
#include <thrust/host_vector.h>
#include <thrust/iterator/transform_iterator.h>
#include <thrust/random/linear_congruential_engine.h>
#include <thrust/random/normal_distribution.h>
#include <thrust/tuple.h>

#include <gmock/gmock.h>
#include <gtest/gtest.h>

namespace cuspatial {

template <typename T>
struct PairwisePointDistanceTest : public ::testing::Test {
};

template <typename Cart2DVec>
auto compute_point_distance_host(Cart2DVec const& point1, Cart2DVec const& point2)
{
  using Cart2D = typename Cart2DVec::value_type;
  using T      = typename Cart2D::value_type;
  thrust::host_vector<Cart2D> h_point1(point1);
  thrust::host_vector<Cart2D> h_point2(point2);
  auto pair_iter =
    thrust::make_zip_iterator(thrust::make_tuple(h_point1.begin(), h_point2.begin()));
  auto result_iter = thrust::make_transform_iterator(pair_iter, [](auto p) {
    auto p0 = thrust::get<0>(p);
    auto p1 = thrust::get<1>(p);
    return std::sqrt((p0.x - p1.x) * (p0.x - p1.x) + (p0.y - p1.y) * (p0.y - p1.y));
  });

  return thrust::host_vector<T>(result_iter, result_iter + point1.size());
}

using TestTypes = ::testing::Types<float, double>;

TYPED_TEST_CASE(PairwisePointDistanceTest, TestTypes);

TYPED_TEST(PairwisePointDistanceTest, Empty)
{
  using T         = TypeParam;
  using Cart2D    = cartesian_2d<T>;
  using Cart2DVec = std::vector<Cart2D>;

  rmm::device_vector<Cart2D> points1{};
  rmm::device_vector<Cart2D> points2{};

  rmm::device_vector<T> expected{};
  rmm::device_vector<T> got(points1.size());

  pairwise_point_distance(points1.begin(), points1.end(), points2.begin(), got.begin());

  EXPECT_EQ(expected, got);
}

TYPED_TEST(PairwisePointDistanceTest, OnePair)
{
  using T         = TypeParam;
  using Cart2D    = cartesian_2d<T>;
  using Cart2DVec = std::vector<Cart2D>;

  rmm::device_vector<Cart2D> points1{Cart2DVec{{1.0, 1.0}}};
  rmm::device_vector<Cart2D> points2{Cart2DVec{{0.0, 0.0}}};

  rmm::device_vector<T> expected{std::vector<T>{std::sqrt(T{2.0})}};
  rmm::device_vector<T> got(points1.size());

  pairwise_point_distance(points1.begin(), points1.end(), points2.begin(), got.begin());

  EXPECT_EQ(expected, got);
}

template <typename T>
struct RandomPointGenerator {
  using Cart2D = cartesian_2d<T>;
  thrust::minstd_rand rng{};
  thrust::random::normal_distribution<T> norm_dist{};

  Cart2D __device__ operator()(size_t const& i)
  {
    rng.discard(i);
    return Cart2D{norm_dist(rng), norm_dist(rng)};
  }
};

TYPED_TEST(PairwisePointDistanceTest, ManyRandom)
{
  using T         = TypeParam;
  using Cart2D    = cartesian_2d<T>;
  using Cart2DVec = std::vector<Cart2D>;

  std::size_t constexpr num_points = 1000;

  rmm::device_vector<Cart2D> points1(num_points);
  rmm::device_vector<Cart2D> points2(num_points);

  auto counting_iter1 = thrust::make_counting_iterator(0);
  auto counting_iter2 = thrust::make_counting_iterator(num_points);

  thrust::transform(
    counting_iter1, counting_iter1 + num_points, points1.begin(), RandomPointGenerator<T>{});
  thrust::transform(
    counting_iter2, counting_iter2 + num_points, points2.begin(), RandomPointGenerator<T>{});

  auto expected = compute_point_distance_host(points1, points2);
  rmm::device_vector<T> got(points1.size());

  pairwise_point_distance(points1.begin(), points1.end(), points2.begin(), got.begin());
  thrust::host_vector<T> hgot(got);

  if constexpr (std::is_same_v<T, float>) {
    EXPECT_THAT(expected, ::testing::Pointwise(::testing::FloatEq(), hgot));
  } else {
    EXPECT_THAT(expected, ::testing::Pointwise(::testing::DoubleEq(), hgot));
  }
}

TYPED_TEST(PairwisePointDistanceTest, CompareWithShapely)
{
  using T         = TypeParam;
  using Cart2D    = cartesian_2d<T>;
  using Cart2DVec = std::vector<Cart2D>;

  std::size_t constexpr num_points = 100;

  std::vector<T> x1{
    -12.30983106, -7.92705956,  -49.9570584,  -1.05124645,  -89.39777526, -32.46014839,
    -20.64749623, 74.88373211,  -3.56663354,  -91.43203925, 1.68283845,   30.90993924,
    2.52087164,   -47.13990143, -89.6038701,  15.79930126,  -22.88872897, 81.6430658,
    28.3240726,   -43.32017928, 31.15072851,  -90.9256331,  -17.07797375, -88.54243713,
    -83.67679143, -78.86701539, 60.11416346,  38.38679261,  86.29202144,  90.51425714,
    -72.13954337, -29.90930958, -72.27943372, 49.18231191,  -84.50393601, -94.33250534,
    -9.93256832,  36.99556838,  -24.20862704, -50.44204232, -59.14098804, 30.67322574,
    48.6740379,   -63.20731556, 29.52859942,  26.1739035,   47.79243984,  -99.38850933,
    -83.31147453, 5.84133312,   -47.87029605, 95.82254404,  -55.52829901, 74.87973108,
    -84.05457105, -95.877361,   -6.48011262,  -78.09036923, 62.14707651,  -43.34499838,
    77.42752654,  12.53076343,  97.98997833,  -51.38957136, 59.66745814,  65.98475889,
    30.40020778,  -49.59550931, 9.93012318,   -19.28373689, -78.06236248, 63.68142859,
    79.4625226,   54.24426312,  30.45840289,  70.78206731,  -15.30635468, 91.01665772,
    -32.76589235, -72.46623074, 58.8632721,   -41.35480445, -61.06943341, 81.15104129,
    -77.69660768, 95.47462924,  -97.46155919, -81.54704047, 84.92285342,  -16.08257532,
    52.50986409,  63.78396724,  13.60523945,  -63.70301611, -63.10763374, -61.10864955,
    57.26635791,  -46.96569014, -43.63636501, -29.30674629};
  std::vector<T> y1{
    -18.05187594, -72.61500308, -23.91931729, 74.04449323,  27.00365642,  5.1319236,
    14.38149555,  -44.99859038, 66.15308743,  31.82686363,  60.19621369,  36.0210066,
    -18.16429723, 23.06381469,  -34.39959102, -80.65093615, -50.66614352, 30.69653939,
    -62.06159839, -55.67574679, 2.25702849,   49.26091313,  -69.7029038,  -14.16800789,
    87.743588,    -88.40683092, -78.23312583, 18.95008158,  -13.00117829, -88.72165573,
    29.1323603,   0.96433644,   -58.14148269, 98.23977047,  87.65596264,  -68.42627074,
    -61.49539737, 95.22412232,  -71.36634131, -87.93028627, -63.70741872, 1.83023166,
    -44.18487939, -29.21226692, 36.63070499,  90.55120946,  35.40957933,  -53.4846641,
    85.05271776,  80.18938384,  -21.31383215, -64.49346601, -72.18007668, 50.73463806,
    7.31981159,   -56.54419098, -80.58912509, 6.9148441,    -22.67913193, 75.95466325,
    69.60650343,  27.61785095,  -17.79886571, -78.36406108, 6.59132839,   64.32222104,
    55.24725933,  -53.49018276, -71.57964472, -9.67121623,  -29.99957675, -54.15829041,
    29.2535217,   57.8310291,   76.77316186,  -54.7557032,  58.71741302,  -89.00648352,
    -62.5722641,  55.11808159,  -72.80219812, 56.12298346,  -9.07364408,  87.38574222,
    16.65929972,  -91.77505634, -99.47758027, 6.65748231,   19.82536216,  -22.91831102,
    30.17048427,  83.6666866,   -91.70882742, 78.70726479,  86.04667134,  -83.58460595,
    84.27888265,  6.37422824,   62.58260785,  -87.64421056};

  std::vector<T> x2{
    -69.89840831561355,   78.8460456024616,    39.85341596822734,   -24.391223974913235,
    13.303395979112231,   -12.113621295331923, 65.76955972393912,   32.88000233887396,
    75.15679902070009,    70.42968479275325,   -70.48373074669782,  -67.41906709787041,
    24.0317463752441,     15.6825064869063,    22.786346338534358,  -20.418849974209763,
    34.82105661248487,    38.24867453316148,   -25.835471974453984, -99.8181927392706,
    89.84785718125181,    92.62449528299297,   -15.692938009982782, 42.32594734729251,
    -60.14762773795758,   74.97034158301297,   49.83345296858048,   -8.799811548418369,
    35.12809596314472,    93.18344995215058,   -94.67426883200939,  52.863378156989384,
    80.55592370229223,    -9.708518300250157,  58.19902373613033,   94.71328595396487,
    -41.956496383879006,  -99.23900353260521,  -96.8820547539014,   -61.540850851797046,
    10.60351610840815,    -86.06663137958869,  -19.76183018904282,  -52.98140516951296,
    -60.77170988936312,   -67.64765557651907,  45.61193823583003,   56.92515530750559,
    -33.35973933318071,   -51.94527984432248,  -14.582250347543601, -96.83073470861669,
    -47.25698648583708,   48.904375839188006,  14.554162511314495,  38.237373081363344,
    -32.7325518620032,    57.537241341535015,  -70.50257367880944,  -83.11435173667108,
    1.3843207970826832,   -61.35647094743536,  43.70708320820875,   -81.93488230360825,
    -53.098660448910465,  70.16656087048054,   0.7197864636628637,  92.59459361315123,
    -77.37226816319428,   -32.66885376463454,  34.32370196646004,   71.72963476414482,
    1.5234779242439433,   3.0626652169396085,  -1.600973288116736,  -1.875116500268692,
    24.115900341387686,   -6.818007491235834,  -37.57206985691543,  46.48919986671669,
    99.81587509298548,    26.961573147884856,  -57.411420876126954, -78.90146907605978,
    37.2322492476274,     67.99231943510561,   64.95985406157519,   -21.195261701977287,
    78.89518238318205,    -95.50952525706322,  76.75637507677297,   -63.30961059551444,
    88.07294705390709,    12.963110252847354,  -59.3400766172247,   18.016669829562915,
    0.024732013514316975, -47.68463698812436,  -16.12846919710843,  57.85570255646779,
  };

  std::vector<T> y2{
    96.98573446,  -58.67543342, -15.58533008, -14.69764415, 85.96236693,  38.92770099,
    19.79169398,  27.48346165,  53.91447893,  75.83100042,  17.73746514,  51.50105094,
    33.83904611,  -9.5980519,   27.56740206,  33.72816966,  48.98821931,  -14.86179498,
    0.13287706,   35.05682116,  88.14369171,  -20.65562107, -36.15962607, 23.46390886,
    95.9320668,   10.93618875,  -76.64604957, -44.27118733, -17.066191,   51.82799017,
    -55.47233099, 82.31391458,  -99.25207116, -8.96223612,  -14.76459615, 35.51101965,
    -7.51521537,  -12.73466947, -76.18168201, -58.82174033, -64.55998759, -66.29491005,
    96.9048821,   -42.97997452, -31.86598156, -96.36343702, -84.20827194, 26.79428452,
    62.9120389,   -87.22767369, 11.29343689,  -65.44214692, 85.68799019,  61.94678236,
    83.46238187,  21.33376867,  61.87186017,  -35.70805035, 68.43167378,  -18.40025139,
    25.27768848,  -74.94714348, 2.39102813,   -78.06742778, 73.16329192,  -5.42551355,
    -17.11543473, -21.57167168, 60.95981138,  -87.3077912,  46.07464277,  -26.73518669,
    77.34113841,  -10.89097658, -7.48300521,  -24.16332469, 66.03877278,  46.51467863,
    86.52324723,  23.88758094,  32.7046036,   47.38730439,  -40.72743971, 96.60257607,
    -93.12849376, -70.2629721,  94.52718105,  68.27804048,  -74.27404657, -21.16650115,
    -34.93847764, 66.55335171,  -88.44856488, -23.53818607, -29.02780535, -29.34648183,
    74.28318391,  -38.37789666, 56.28623834,  -81.09317815};

  std::vector<T> expect{
    128.64717656028176, 87.88562670763609,  90.19632281028372,  91.76013021796666,
    118.4215357030851,  39.44788631062081,  86.58624490836462,  83.77327247860025,
    79.6690804001798,   167.7366440763836,  83.73027552297903,  99.54006861093508,
    56.276686562837135, 70.80573751073386,  128.34122090714868, 119.97639069191793,
    115.15820154183437, 62.91768450568626,  82.47065566268454,  106.88509910638807,
    104.02822613477268, 196.4153033352887,  33.57186030542483,  136.17156536458378,
    24.91330426477482,  183.12555244130633, 10.402491013960068, 78.8891909881514,
    51.325155608916646, 140.57498906651185, 87.55436962189877,  116.056329846112,
    158.26789618636312, 122.3127143880106,  175.65336769339257, 215.7342613973661,
    62.764576137605516, 173.82450721651924, 72.83278521088664,  31.152704497923047,
    69.74971493014701,  135.16371248533227, 156.8113160405468,  17.14989841904493,
    113.33993969348232, 209.1400727201678,  119.63772368951071, 175.72328059917774,
    54.63868144260578,  177.1094683844075,  46.59751045319419,  192.6556145241176,
    158.08460123131488, 28.29189388239395,  124.5848038188644,  155.08622923365692,
    144.85966618486546, 142.16736573734084, 160.92578604203126, 102.39361006963875,
    88.02052587541618,  126.40767969785988, 57.91601260573419,  30.546751247397513,
    130.95046326396607, 69.87298439379285,  78.21308650467851,  145.7285720718672,
    158.70858501146054, 78.78197209323828,  135.71261679147338, 28.579717281106852,
    91.58009372078648,  85.68704702725647,  90.14934991196503,  78.83501748640491,
    40.09634022929284,  167.14546691120552, 149.17295612658907, 122.98674172809133,
    113.17597316247064, 68.87263271597341,  31.86446035391618,  160.31767244865998,
    158.94024585517036, 34.900531808173085, 253.01889830507722, 86.25213267010419,
    94.2922665997649,   79.44626620532313,  69.47712008431841,  128.24056985459816,
    74.53904203761351,  127.79603731531678, 115.13613538697125, 95.93013225849919,
    58.10781125509778,  44.75789949605465,  28.21929483784659,  87.40828630126103};

  rmm::device_vector<T> dx1(x1), dy1(y1), dx2(x2), dy2(y2), dexpect(expect);
  rmm::device_vector<T> got(dx1.size());

  auto p1_begin = make_cartesian_2d_iterator<T>(dx1.begin(), dy1.begin());
  auto p2_begin = make_cartesian_2d_iterator<T>(dx2.begin(), dy2.begin());

  pairwise_point_distance(p1_begin, p1_begin + dx1.size(), p2_begin, got.begin());

  if constexpr (std::is_same_v<T, float>) {
    EXPECT_THAT(expected, ::testing::Pointwise(::testing::FloatEq(), hgot));
  } else {
    EXPECT_THAT(expected, ::testing::Pointwise(::testing::DoubleEq(), hgot));
  }
}

}  // namespace cuspatial
