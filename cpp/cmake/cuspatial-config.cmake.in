@PACKAGE_INIT@


#[=======================================================================[

Provide targets for the cuspatial library.


Imported Targets
^^^^^^^^^^^^^^^^

If cuspatial is found, this module defines the following IMPORTED GLOBAL
targets:

 cuspatial::cuspatial             - The main cuspatial library.
 GDAL::GDAL                       - The Geospatial Data Abstraction Library.


Result Variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project::

  cuspatial_FOUND
  CUSPATIAL_VERSION
  CUSPATIAL_VERSION_MAJOR
  CUSPATIAL_VERSION_MINOR

#]=======================================================================]

cmake_minimum_required(VERSION 3.18)

set(_possible_targets_to_promote
      GDAL::GDAL
      cuspatial::cuspatial)

foreach(target IN LISTS _possible_targets_to_promote)
  if(NOT TARGET ${target})
    list(APPEND _targets_to_promote ${target})
  endif()
endforeach()

set(CUSPATIAL_VERSION @CUSPATIAL_VERSION@)
set(CUSPATIAL_VERSION_MAJOR @CUSPATIAL_VERSION_MAJOR@)
set(CUSPATIAL_VERSION_MINOR @CUSPATIAL_VERSION_MINOR@)

# make the bundled find modules in this directory available
list(PREPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}")

include(CMakeFindDependencyMacro)

find_dependency(CUDAToolkit)
find_dependency(GDAL)
find_dependency(cudf @CUSPATIAL_MIN_VERSION_cudf@)

list(POP_FRONT CMAKE_MODULE_PATH)

include("${CMAKE_CURRENT_LIST_DIR}/cuspatial-targets.cmake")
include("${CMAKE_CURRENT_LIST_DIR}/cuspatial-config-version.cmake")

check_required_components(cuspatial)

foreach(target IN LISTS _targets_to_promote)
  if(TARGET ${target})
    get_target_property(_already_global ${target} IMPORTED_GLOBAL)
    if(NOT _already_global)
      set_target_properties(${target} PROPERTIES IMPORTED_GLOBAL TRUE)
    endif()
  endif()
endforeach()

set(${CMAKE_FIND_PACKAGE_NAME}_CONFIG "${CMAKE_CURRENT_LIST_FILE}")

include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(${CMAKE_FIND_PACKAGE_NAME} CONFIG_MODE)
